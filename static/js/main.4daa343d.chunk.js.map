{"version":3,"sources":["Login.jsx","Chat.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","main","backgroundColor","textAlign","form","width","submit","margin","checkbox","color","input","borderColor","avatar","height","borderRadius","SignIn","onSubmit","classes","history","useHistory","Container","component","maxWidth","className","CssBaseline","Avatar","alt","src","Typography","variant","e","preventDefault","userId","target","value","nickname","checked","push","TextField","required","fullWidth","id","label","name","autoFocus","FormControlLabel","control","Checkbox","Button","type","Chat","useEffect","useState","showSettings","setShowSettings","currentChannelUrl","setCurrentChannelUrl","style","appId","process","onChannelSelect","channel","url","channelUrl","onChatHeaderActionClick","onCloseClick","App","config","setconfig","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oSAeMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,MAAO,CACLC,UAAWF,EAAMG,QAAQ,GACzBC,QAAS,OACTC,cAAe,SACfC,WAAY,UAEdC,KAAM,CACJC,gBAAiB,QACjBC,UAAW,UAEbC,KAAM,CACJC,MAAO,OACPT,UAAWF,EAAMG,QAAQ,IAE3BS,OAAQ,CACNC,OAAQb,EAAMG,QAAQ,EAAG,EAAG,GAC5BK,gBAAiB,UACjB,UAAW,CACTA,gBAAiB,YAGrBM,SAAU,CACR,gBAAiB,CACfC,MAAO,YAGXC,MAAO,CACL,iBAAkB,CAChBD,MAAO,WAET,2BAA4B,CAC1B,yBAA0B,CACxBE,YAAa,aAInBC,OAAQ,CACNhB,UAAW,GACXS,MAAO,KACPQ,OAAQ,GACRC,aAAc,OAIH,SAASC,EAAT,GAA+B,IAAbC,EAAY,EAAZA,SACzBC,EAAUzB,IACV0B,EAAUC,cAChB,OACE,kBAACC,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,KAAKC,UAAWN,EAAQhB,MAC3D,kBAACuB,EAAA,EAAD,MACA,yBAAKD,UAAWN,EAAQtB,OACtB,kBAAC8B,EAAA,EAAD,CACEC,IAAI,gBACJC,IAAI,0FACJJ,UAAWN,EAAQL,SAErB,kBAACgB,EAAA,EAAD,CAAYP,UAAU,KAAKQ,QAAQ,MAAnC,2BAGA,0BACEN,UAAWN,EAAQb,KACnBY,SAAU,SAAAc,GACRA,EAAEC,iBACFf,EAAS,CACPgB,OAAQF,EAAEG,OAAOD,OAAOE,MACxBC,SAAUL,EAAEG,OAAOE,SAASD,MAC5BxC,MAAOoC,EAAEG,OAAOvC,MAAM0C,QAAU,OAAS,UAE3ClB,EAAQmB,KAAK,WAGf,kBAACC,EAAA,EAAD,CACET,QAAQ,WACRtB,OAAO,SACPgC,UAAQ,EACRC,WAAS,EACTC,GAAG,SACHC,MAAM,UACNC,KAAK,SACLpB,UAAWN,EAAQP,MACnBkC,WAAS,IAEX,kBAACN,EAAA,EAAD,CACET,QAAQ,WACRtB,OAAO,SACPgC,UAAQ,EACRC,WAAS,EACTG,KAAK,WACLD,MAAM,YACND,GAAG,WACHlB,UAAWN,EAAQP,QAErB,kBAACmC,EAAA,EAAD,CACEC,QAAS,kBAACC,EAAA,EAAD,CAAUb,MAAM,OAAOzB,MAAM,UAAUkC,KAAK,QAAQpB,UAAWN,EAAQT,WAChFkC,MAAM,qBAER,kBAACM,EAAA,EAAD,CACEC,KAAK,SACLT,WAAS,EACTX,QAAQ,YACRpB,MAAM,UACNc,UAAWN,EAAQX,QALrB,WAWJ,kBAACsB,EAAA,EAAD,CAAYC,QAAQ,SAApB,uE,yBC9GS,SAASqB,EAAT,GAA4C,IAA5BlB,EAA2B,EAA3BA,OAAQG,EAAmB,EAAnBA,SAAUzC,EAAS,EAATA,MACzCwB,EAAUC,cAChBgC,qBAAU,WACHnB,GAAWG,GACdjB,EAAQmB,KAAK,OAEd,CAACL,EAAQG,EAAUjB,IACtB,MAAwCkC,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAkDF,mBAAS,MAA3D,mBAAOG,EAAP,KAA0BC,EAA1B,KACA,OACE,yBAAKC,MAAO,CAAE5C,OAAQ,UACpB,kBAAC,IAAD,CACE6C,MAAOC,uCACPjE,MAAOA,EACPsC,OAAQA,EACRG,SAAUA,GAEV,yBAAKZ,UAAU,sBACb,yBAAKA,UAAU,kCACb,kBAAC,IAAD,CACEqC,gBAAiB,SAACC,GACZA,GAAWA,EAAQC,KACrBN,EAAqBK,EAAQC,SAKrC,yBAAKvC,UAAU,mCACb,kBAAC,IAAD,CACEwC,WAAYR,EACZS,wBAAyB,WAAQV,GAAgB,QAItDD,GACC,yBAAK9B,UAAU,oCACb,kBAAC,IAAD,CACEwC,WAAYR,EACZU,aAAc,WAAQX,GAAgB,SCjBrCY,MAtBf,WACE,MAA4Bd,mBAAS,IAArC,mBAAOe,EAAP,KAAeC,EAAf,KACA,OACE,yBAAK7C,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO8C,KAAK,SACV,kBAAC,EAAD,CACErC,OAAQmC,EAAOnC,OACfG,SAAUgC,EAAOhC,SACjBzC,MAAOyE,EAAOzE,SAGlB,kBAAC,IAAD,CAAO2E,KAAK,KACV,kBAAC,EAAD,CAAOrD,SAAUoD,SCdTE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4daa343d.chunk.js","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Avatar from '@material-ui/core/Avatar';\n\nimport {\n  useHistory,\n} from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  main: {\n    backgroundColor: 'white',\n    textAlign: 'center',\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n    backgroundColor: '#6e5baa',\n    '&:hover': {\n      backgroundColor: '#825deb',\n    },\n  },\n  checkbox: {\n    '&.Mui-checked': {\n      color: '#825deb',\n    },\n  },\n  input: {\n    '& .Mui-focused': {\n      color: '#825deb',\n    },\n    '& .MuiOutlinedInput-root': {\n      '&.Mui-focused fieldset': {\n        borderColor: '#825deb',\n      },\n    }\n  },\n  avatar: {\n    marginTop: 20,\n    width: 127 / 2,\n    height: 150 / 2,\n    borderRadius: 0,\n  },\n}));\n\nexport default function SignIn({ onSubmit }) {\n  const classes = useStyles();\n  const history = useHistory();\n  return (\n    <Container component=\"main\" maxWidth=\"xs\" className={classes.main}>\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar\n          alt=\"Sendbird Logo\"\n          src=\"https://dxstmhyqfqr1o.cloudfront.net/symbol/Sendbird_Symbol_PNG/Sendbird_Symbol_RGB.png\"\n          className={classes.avatar}\n        />\n        <Typography component=\"h1\" variant=\"h5\">\n          Sendbird | UIKit Sample\n        </Typography>\n        <form\n          className={classes.form}\n          onSubmit={e => {\n            e.preventDefault();\n            onSubmit({\n              userId: e.target.userId.value,\n              nickname: e.target.nickname.value,\n              theme: e.target.theme.checked ? 'dark' : 'light',\n            });\n            history.push('/chat');;\n          }}\n        >\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"userId\"\n            label=\"User Id\"\n            name=\"userId\"\n            className={classes.input}\n            autoFocus\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"nickname\"\n            label=\"Nick Name\"\n            id=\"nickname\"\n            className={classes.input}\n          />\n          <FormControlLabel\n            control={<Checkbox value=\"dark\" color=\"primary\" name=\"theme\" className={classes.checkbox} />}\n            label=\"Apply dark theme\"\n          />\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            Login\n          </Button>\n        </form>\n      </div>\n      <Typography variant=\"body1\">\n        Start chatting on Sendbird by choosing your username and nickname.\n      </Typography>\n    </Container>\n  );\n}\n","import React, { useEffect, useState } from 'react';\n\nimport './Chat.css';\n\nimport { useHistory } from \"react-router-dom\";\nimport {\n  SendBirdProvider,\n  ChannelList,\n  Channel,\n  ChannelSettings,\n} from 'sendbird-uikit';\nimport 'sendbird-uikit/dist/index.css';\n\nexport default function Chat({ userId, nickname, theme }) {\n  const history = useHistory();\n  useEffect(() => {\n    if (!userId || !nickname) {\n      history.push('/');\n    }\n  }, [userId, nickname, history]);\n  const [showSettings, setShowSettings] = useState(false);\n  const [currentChannelUrl, setCurrentChannelUrl] = useState(null);\n  return (\n    <div style={{ height: '100vh' }}>\n      <SendBirdProvider\n        appId={process.env.APP_ID}\n        theme={theme}\n        userId={userId}\n        nickname={nickname}\n      >\n        <div className=\"sendbird-app__wrap\">\n          <div className=\"sendbird-app__channellist-wrap\">\n            <ChannelList\n              onChannelSelect={(channel) => {\n                if (channel && channel.url) {\n                  setCurrentChannelUrl(channel.url);\n                }\n              }}\n            />\n          </div>\n          <div className=\"sendbird-app__conversation-wrap\">\n            <Channel\n              channelUrl={currentChannelUrl}\n              onChatHeaderActionClick={() => { setShowSettings(true); }}\n            />\n          </div>\n        </div>\n        {showSettings && (\n          <div className=\"sendbird-app__settingspanel-wrap\">\n            <ChannelSettings\n              channelUrl={currentChannelUrl}\n              onCloseClick={() => { setShowSettings(false); }}\n            />\n          </div>\n        )}\n      </SendBirdProvider>\n    </div>\n  )\n}\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\n\nimport Login from './Login';\nimport Chat from './Chat';\n\nfunction App() {\n  const [config, setconfig] = useState({});\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path=\"/chat\">\n            <Chat\n              userId={config.userId}\n              nickname={config.nickname}\n              theme={config.theme}\n            />\n          </Route>\n          <Route path=\"/\">\n            <Login onSubmit={setconfig} />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}